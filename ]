diff --git a/src/nlocVecRoutines.c b/src/nlocVecRoutines.c
index 991b5eb..6351583 100644
--- a/src/nlocVecRoutines.c
+++ b/src/nlocVecRoutines.c
@@ -684,7 +684,7 @@ void CalculateNonlocalInnerProductIndex(SPARC_OBJ *pSPARC)
  * @brief   Calculate Vnl times vectors in a matrix-free way.
  */
 void Vnl_vec_mult(const SPARC_OBJ *pSPARC, int DMnd, ATOM_NLOC_INFLUENCE_OBJ *Atom_Influence_nloc,
-                  NLOC_PROJ_OBJ *nlocProj, int ncol, double *x, double *Hx, MPI_Comm comm)
+                  NLOC_PROJ_OBJ *nlocProj, int ncol, double *x, double *Hx, MPI_Comm comm, double *ans)
 {
     /*FILE *psprk, *atm_inf, *proj, *hx, *HX, *X, *others;
     psprk = fopen("pSPARC.bin","w");
@@ -712,9 +712,26 @@ void Vnl_vec_mult(const SPARC_OBJ *pSPARC, int DMnd, ATOM_NLOC_INFLUENCE_OBJ *At
     fclose(X);
     fclose(others);*/
     double *hx;
-    hx = (double *)malloc(DMnd * ncol * sizeof(double));
-    memcpy(hx, Hx, DMnd * ncol * sizeof(double));
-
+    //hx = (double *)malloc(DMnd * ncol * sizeof(double));
+    //memcpy(hx, Hx, DMnd * ncol * sizeof(double));
+    double static time = 0.0;
+    double Start = MPI_Wtime();
+if(pSPARC==NULL){
+
+    *ans = time;
+    return;
+}
+	static int show = 0;
+if (show == 0) {
+
+	for (int i = 0; i < pSPARC->Ntypes; i++){
+		printf("lmax :%d, ,lloc = %d ,i:%d \n",(pSPARC->psd[i]).lmax,pSPARC->localPsd[i], i);
+		int lmax = (pSPARC->psd[i]).lmax; 
+		for (int j = 0; j < lmax; j++)
+			printf("ppl :%d\n",(pSPARC->psd[i]).ppl[j]);
+	}
+	show++;
+}
     //alpha = (double *)calloc( pSPARC->IP_displ[pSPARC->n_atom] * ncol, sizeof(double));
 
     int i, n, np, count;
@@ -793,9 +810,11 @@ void Vnl_vec_mult(const SPARC_OBJ *pSPARC, int DMnd, ATOM_NLOC_INFLUENCE_OBJ *At
         }
     }
 
-    test_vnl(pSPARC, DMnd, Atom_Influence_nloc, nlocProj, ncol, x, Hx, comm, hx);
-    //free(alpha);
-    printf("done!\n");
+    //test_vnl(pSPARC, DMnd, Atom_Influence_nloc, nlocProj, ncol, x, Hx, comm, hx);
+    free(alpha);
+    time += (MPI_Wtime()-Start)*1e3;
+    //printf("total: %f\n", time);
+    //printf("done!\n");
     //exit(0);
 }
 
